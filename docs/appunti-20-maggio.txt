MIC2
Introduzione IFU - instruction fetch unit

permette di ridurre il carico della cpu leggendo le istruzioni
Contro: le istruzioni di salto fanno si che ci sia una discontinuità

Cambia da classica struttura PC/MBR a un'architettura: 

IMAR con MBRU1/MBR2
MBR1 -> MBR del byte successivo
MBR2 -> prendo due byte successivi per le istruzioni di salto/ WIDE LOAD/STORE

AUTOMA STATI FINITI per fetching 
Il registro a scorrimento fetcha 4 byte ogni volta, non posso aspettare che il registro
sia completamente vuoto, quando ho almeno due byte disponibili ne fetcho 4
Quando fetcho dalla memoria, fetcho 4 byte (1 word), motivo per cui il registro 
a scorrimento fetcha 4 byte e la dimensione è di 6 byte ogni volta

è un automa a 6 byte, si fetcha dal registro con MBR1 1 byte, con MBR2 2 byte alla volta
Appena parte legge sei byte alla volta

Esercizio : come cambiano PC e IMAR in corrispondenza delle istruzioni
programma indirizzato al byte
dati indirizzati alla word

IMAR = recupera indirizzo di memoria per accedere alle istruzioni (memoria di programma)
IMAR preleva la parola, quindi 4 byte (1 word)
IMAR legge e mette nel registro a scorrimento 4 Byte


Se sto facendo un MBR1 leggo un byte dal registro a scorrimento e incremento PC automaticamente
senza doverlo fare io (consumo il dato dal registro e lo porto nel programma)

Se faccio MBR2 -> consumo due byte e non 1

prelievo di una parola :
- IMAR incrementa di uno (fetch di una word)
- se MBR1 -> PC + 1 (pop di un byte dal register shifter)
- se MBR2 -> PC + 2 (pop di due byte dal register shifter)

Cosa succede se un'istruzione imposta all'indirizzo 0x5F7A5 la prossima istruzione
vogliamo conoscere il valore di IMAR ?

IMAR = ??

codifica in bit : 0101 1111 0111 1010 0101 -> indirizzo program counter
                  5     F     7    A    5

indirizzo a livello di byte
IMAR lavora a livello di word, PC a livello di byte
tolgo due bit al mio indirizzo (so quale è il blocco di memoria)
abbiamo calcolato la parola che contiene l'indirizzo

abbiamo fatto un salto: tutto ciò che è stato fatto fin'ora non va bene
e va tolto dallo shifter register
Una volta messo il contenuto dell'IMAR, va incrementato per leggere il successivo

IMAR lo cambio due volte : 
- una volta per il valore del registro
- incremento (faccio +1, ma a livello di word)


Esercizio 2:

descrivere il ruolo dei registri all'interno dell'interprete IJVM

MAR -> serve a fetchare un dato da memoria, porta all'interno del registro 
MDR il dato, lavora a livello di word

MDR -> contiene la word del dato
SP -> stack pointer contiene l'indirizzo di memoria dello stack

OPC -> Old program counter, registro di appoggio
TOS -> top of the stack
H -> register holding
PC -> program counter


Come cambiano in MIC-2? 

MAR, MDR, SP, TOS rimangono uguali
H diventa un registro come tutti gli altri
PC e MBR cambiano, diventano IMAR, MBR1, MBR2, PC viene eliminato



Descrivere come l'architettura della MIC-2 diventa MIC-3?

La pipeline introdotta insieme ai latch a, b, c ci permette di suddividere
le istruzioni in più microistruzioni che sono distinte per ogni istruzioni.
Ciò ci permette di eseguire ad ogni ciclo di clock una nuova istruzione a 
a regime eseguiamo un'istruzione ogni ciclo di clock eseguito


Esercizio 4: come cambia la ILOAD nella nuova architettura

ILOAD MAR = MBRU1 + LV; rd
ILOAD2 MAR = SP = SP + 1;
ILOAD3 TOS = MDR; wr;
       GOTO MBRU


Scrivere in MIC-3 con le nuove dipendenze:

1   A = MBRU, B = LV
2   C = A + B           B = SP
3   MAR = C; rd         C = B + 1           
4   MDR = MBRU2         MAR = SP = C;       
5                                       //bolla, non c'è nulla da fare
6                                       B = MDR   //MDR è in utilizzo sopra
7                                       C = B
8                                       MDR = TOS = C; wr
